// async await

// async keyword
// if we use async before a fn it basically means that 
// that fn will return a promise it may be resolved or rejected

// This async fn returns a resolved promise 
async function name() {
    return 42;
    //  or
    return Promise.resolve(42);
}

// const p1 = name();
// console.log(p1);
// p1.then((res)=>{console.log(res);
// }).catch((err)=>{console.log(err);})


// async function noReturn() {
//   console.log("Hello!");
// }

// const result = noReturn();
// console.log(result); // Promise {<fulfilled>: undefined}


// This async fn returns rejected promise
async function f() {
    throw new Error("Hi");
    //   or
    return Promise.reject("Hi");
}

// const p2 = f();
// console.log(p2);
// p2.then((res)=>{console.log(res);})
// .catch((err)=>{console.log(err.message);
// })

// await keyword
// works only inside async functions
// The keyword await makes JavaScript wait until that promise settles and returns its result.
    
// await waits for the promise to either:
// resolve (fulfilled) — then it gives you the value
// or reject (fail) — then it throws an error (which you can catch)

async function fun() {

  let promise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("done!"), 1000)
  });

  let result = await promise; // wait until the promise resolves

  console.log(result); // "done!"
}

// fun().then((res)=>{console.log(res);
// });


// Error Handling in async await
// If a promise resolves normally, then await promise returns the result. 
// But in the case of a rejection, it throws the error, just as if there were a throw statement at that line.
async function label() {
    await Promise.reject(new Error("Something went wrong..."));
}

//     same as

// async function label() {
//     throw new Error("Something went wrong...");
// }

// const p3 = label();
// p3.catch((err)=>{console.log(err)})
// console.log(p3);


async function fetchApi() {
    try {
        let response = await fetch('http://no-such-url');
    } catch (error) {
        console.log(error);
    }
}

fetchApi().then((res)=>{console.log("Triggered Resolved Promise");
});

// If we don’t have try..catch, 
// then the promise generated by the call of the async function f() becomes rejected. 
// We can append .catch to handle it:

// async function fetchApi() {
//     let response = await fetch('http://no-such-url');
// }

// fetchApi().catch((err)=>{
//     console.log(err);
// })

// If we forget to add .catch there, then we get an unhandled promise error (viewable in the console). 

